import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import make_scorer, roc_auc_score

# 例としてDataFrameを作成（実際には既にあるDataFrameを使用）
data = {
    'feature1': [1, 2, 3, 4, 5],
    'feature2': ['A', 'B', 'A', 'B', None],
    'feature3': [20, None, 30, 40, 50]
}
df = pd.DataFrame(data)

# 特徴量とターゲットに分ける
X = df.drop('feature1', axis=1)  # feature1をターゲットと仮定
y = df['feature1']

# 訓練データとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 数値データとカテゴリカルデータを自動的に識別
numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns
categorical_features = X_train.select_dtypes(include=['object', 'category']).columns

# 数値データの処理用のパイプライン
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),  # 数値データの欠損値を平均値で補完
    ('scaler', StandardScaler())  # 標準化
])

# カテゴリカルデータの処理用のパイプライン
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),  # カテゴリカルデータの欠損値を最頻値で補完
    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # ワンホットエンコーディング
])

# 前処理のためのトランスフォーマー
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ]
)

# ランダムフォレストモデルのパイプライン
rf_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(random_state=42))
])

# パラメータの範囲を設定
param_grid = {
    'classifier__n_estimators': [100, 200, 300],
    'classifier__max_features': ['auto', 'sqrt', 'log2'],
    'classifier__max_depth': [4, 5, 6, 7, 8],
    'classifier__criterion': ['gini', 'entropy']
}

# AUCスコアを使用するための設定
auc_scorer = make_scorer(roc_auc_score, needs_proba=True)

# グリッドサーチの設定
grid_search = GridSearchCV(rf_pipeline, param_grid, cv=5, scoring=auc_scorer, verbose=2)

# グリッドサーチの実行
grid_search.fit(X_train, y_train)

# 最適なパラメータの表示
print("Best Parameters:", grid_search.best_params_)
